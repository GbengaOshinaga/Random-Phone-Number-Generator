{"version":3,"sources":["components/Button/index.js","utils/index.js","components/Generator/List/index.js","components/ScrollToTopButton/index.js","components/Generator/index.js","App.js","serviceWorker.js","index.js"],"names":["Button","_ref","children","onClick","className","id","react_default","a","createElement","concat","type","generateNumbers","length","arrayOfGeneratedNumbers","num","Math","floor","random","push","hasReachedBottom","element","getBoundingClientRect","bottom","window","innerHeight","getNumberOfItemsToRender","initialNumberToRender","numberToRender","getMaxNumber","array","max","apply","Object","toConsumableArray","getMinNumber","min","sortAscending","sort","b","sortDescending","List","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onEndReached","data","state","document","getElementById","setState","renderNumbers","filter","number","index","map","key","addEventListener","removeEventListener","React","Component","ScrollToTopButton","scrollStep","intervalId","scrollStepInPx","pageYOffset","clearInterval","scroll","scrollToTop","delayInMs","setInterval","components_Button","Generator","onScroll","_document","body","documentElement","scrollTop","showScrollToTop","onTextChange","event","value","target","isNaN","numberOfGenerations","onSortChange","numbers","sortedNumbers","sortOrder","onGenerateButtonClick","_this$state","onDownloadNumbersClick","numbersString","join","blob","Blob","FileSaver","saveAs","renderInputSection","autoFocus","placeholder","onChange","renderMaxAndMin","renderSortOptions","renderList","Generator_List","renderScrollToTopButton","components_ScrollToTopButton","App","components_Generator","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47adbdd3.chunk.js","sourcesContent":["import React from 'react'\nimport './styles.css'\n\nconst Button = ({ children, onClick, className, id }) => {\n  return (\n    <button\n      id={id}\n      className={`button ${className}`}\n      type=\"button\"\n      onClick={onClick}>\n      {children}\n    </button>\n  )\n}\n\nexport default Button\n","export const generateNumbers = length => {\n  const arrayOfGeneratedNumbers = []\n  while (arrayOfGeneratedNumbers.length < length) {\n    const num = `0${Math.floor(453676891 + Math.random() * 99981671)}`\n    arrayOfGeneratedNumbers.push(num)\n  }\n  return arrayOfGeneratedNumbers\n}\n\nexport const hasReachedBottom = element => {\n  return element ? element.getBoundingClientRect().bottom <= window.innerHeight : false\n}\n\nexport const getNumberOfItemsToRender = (length, initialNumberToRender) => {\n  let numberToRender = initialNumberToRender + 50\n  if (length < numberToRender) {\n    numberToRender = initialNumberToRender + (length - 50)\n  }\n  return numberToRender\n}\n\nexport const getMaxNumber = array => Math.max(...array)\n\nexport const getMinNumber = array => Math.min(...array)\n\nexport const sortAscending = array => array.sort((a, b) => a - b)\n\nexport const sortDescending = array => array.sort((a, b) => b - a)\n","import React from 'react'\nimport { hasReachedBottom, getNumberOfItemsToRender } from '../../../utils'\n\nclass List extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      numberToRender: 50\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('scroll', this.onEndReached)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.onEndReached)\n  }\n\n  onEndReached = () => {\n    const { data } = this.props\n    const { numberToRender } = this.state\n    const element = document.getElementById('list')\n    if (hasReachedBottom(element)) {\n      if (data.length > numberToRender) {\n        this.setState({ numberToRender: getNumberOfItemsToRender(data.length, numberToRender) })\n      }\n    }\n  }\n\n  renderNumbers = () => {\n    const { data } = this.props\n    const { numberToRender } = this.state\n\n    return (\n      <ul className=\"list\" id=\"list\">\n        {data.filter((number, index) => index < numberToRender).map(number => (\n          <li key={number} className=\"item\">{number}</li>\n        ))}\n      </ul>\n    )\n  }\n\n  render() {\n    const { data } = this.props\n\n    return (\n      <div>\n        {data.length ? this.renderNumbers() : null}\n      </div>\n    )\n  }\n}\n\nexport default List","import React from 'react'\nimport Button from '../Button'\nimport './styles.css'\n\nclass ScrollToTopButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      intervalId: 0\n    };\n  }\n    \n  scrollStep = () => {\n    const { intervalId } = this.state\n    const { scrollStepInPx } = this.props\n    if (window.pageYOffset === 0) {\n      clearInterval(intervalId);\n    }\n    window.scroll(0, window.pageYOffset - scrollStepInPx);\n  }\n    \n  scrollToTop = () => {\n    const { delayInMs } = this.props\n    const intervalId = setInterval(this.scrollStep, delayInMs);\n    this.setState({ intervalId });\n  }\n    \n  render () {\n    const { id } = this.props\n    return (\n      <Button id={id} className=\"scroll-button\" onClick={this.scrollToTop}>\n        <i className='up'></i>\n      </Button>\n    )\n  }\n} \n\nexport default ScrollToTopButton","import React from 'react'\nimport FileSaver from 'file-saver'\nimport Button from '../Button'\nimport List from './List'\nimport ScrollToTopButton from '../ScrollToTopButton'\nimport { \n  generateNumbers,\n  getMaxNumber,\n  getMinNumber,\n  sortAscending,\n  sortDescending\n} from '../../utils'\nimport './styles.css'\n\nclass Generator extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      numberOfGenerations: 0,\n      numbers: [],\n      sortOrder: 'ascending',\n      showScrollToTop: false\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener('scroll', this.onScroll)\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('scroll', this.onScroll)\n  }\n\n  onScroll = () => {\n    const { body, documentElement } = document\n\n    if (body.scrollTop > 40 || documentElement.scrollTop > 40) {\n      this.setState({ showScrollToTop: true })\n    } else {\n      this.setState({ showScrollToTop: false })\n    }\n  }\n\n  onTextChange = event => {\n    const { value } = event.target\n    !isNaN(value) && this.setState({ numberOfGenerations: value })\n  }\n\n  onSortChange = event => {\n    const { numbers } = this.state\n    const { value } = event.target\n\n    const sortedNumbers = value === \"ascending\" ? sortAscending(numbers) : sortDescending(numbers)\n\n    this.setState({ sortOrder: value, numbers: sortedNumbers })\n  }\n\n  onGenerateButtonClick = () => {\n    const { numberOfGenerations, sortOrder } = this.state\n    const numbers = generateNumbers(numberOfGenerations)\n    const sortedNumbers = sortOrder === 'ascending' ? sortAscending(numbers) : sortDescending(numbers)\n    this.setState({ numbers: sortedNumbers })\n  }\n\n  onDownloadNumbersClick = () => {\n    const { numbers } = this.state\n    const numbersString = numbers.join(', ')\n\n    const blob = new Blob([numbersString], { type: 'text/plain;charset=utf-8' })\n    FileSaver.saveAs(blob, 'numbers.txt')\n  }\n\n  renderInputSection = () => {\n    const { numbers } = this.state\n\n    return (\n      <div className=\"top-container\">\n        <div className=\"input-section\">\n          <input\n            className=\"input\"\n            autoFocus\n            type=\"number\"\n            placeholder=\"Enter number of phone numbers to generate\"\n            onChange={this.onTextChange}\n          />\n          <Button id=\"generate-button\" onClick={this.onGenerateButtonClick}>Generate</Button>\n        </div>\n        {numbers.length \n          ? \n          (\n            <Button\n             id=\"download-button\"\n             className=\"download-button\"\n             onClick={this.onDownloadNumbersClick}>\n              Download Numbers\n             </Button>\n          )\n          : null}\n      </div>\n    )\n  }\n\n  renderMaxAndMin = () => {\n    const { numbers } = this.state\n    return numbers.length > 2 ? (\n      <div className=\"max-min\">\n        <div className=\"max-num\">\n          <span className=\"max\">Max Num:</span>\n          <span className=\"num\">{`0${getMaxNumber(numbers)}`}</span>\n        </div>\n        <div className=\"min-num\">\n          <span className=\"min\">Min Num:</span> \n          <span className=\"num\">{`0${getMinNumber(numbers)}`}</span>\n        </div>\n      </div>\n    ) : null\n  }\n\n  renderSortOptions = () => {\n    return (\n      <div className=\"sort\">\n        <select className=\"select\" onChange={this.onSortChange}>\n          <option value=\"ascending\">Ascending</option>\n          <option value=\"descending\">Descending</option>\n        </select>\n      </div>\n    )\n  }\n\n  renderList = () => {\n    const { numbers } = this.state\n    return <List data={numbers} />\n  }\n\n  renderScrollToTopButton = () => {\n    const { showScrollToTop } = this.state\n    return showScrollToTop ? \n    (\n      <ScrollToTopButton \n        id=\"scroll-button\"\n        scrollStepInPx=\"80\"\n        delayInMs=\"3\"\n      />\n      ) : null\n  }\n\n  render () {\n    return (\n      <div className=\"main\">\n        {this.renderInputSection()}\n        {this.renderSortOptions()}\n        {this.renderMaxAndMin()}\n        {this.renderList()}\n        {this.renderScrollToTopButton()}\n      </div>\n    )\n  }\n}\n\nexport default Generator\n","import React, { Component } from 'react';\nimport Generator from './components/Generator'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Generator />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}